# âœ… Vulnerability Assessment Checklist (Step-by-Step)

---

## 1. **Preparation Phase**

### 1.1 Define Scope
- [ ] List all IP addresses, domains, and systems to be tested
- [ ] Identify internal vs external assets
- [ ] Categorize systems (web servers, databases, endpoints, etc.)
- [ ] Confirm which environments are in scope (Production, Development, Staging)

### 1.2 Get Authorization
- [ ] Obtain signed "Permission to Test" documents
- [ ] Communicate testing dates and times
- [ ] Notify IT teams (to avoid misinterpretation as real attacks)

### 1.3 Assemble Tools
- [ ] Choose scanners (e.g., Nessus, OpenVAS, Nexpose, Qualys)
- [ ] Set up manual testing tools (e.g., Nmap, Nikto, Metasploit)
- [ ] Ensure updated vulnerability database signatures

---

## 2. **Information Gathering (Reconnaissance)**

### 2.1 Passive Information Gathering
- [ ] WHOIS lookup of domains
- [ ] DNS enumeration (using tools like `dnsenum`, `dig`, `nslookup`)
- [ ] Find exposed assets via Shodan or Censys
- [ ] Gather data from public sources (Google Dorking, LinkedIn)

### 2.2 Active Information Gathering
- [ ] Network Scanning (identify live hosts using `ping`, `Nmap`)
- [ ] Port Scanning (TCP/UDP scan to detect open ports)
- [ ] Service Enumeration (detect services running on open ports)
- [ ] OS Fingerprinting
- [ ] Banner Grabbing (collect server and service versions)

---

## 3. **Vulnerability Scanning**

### 3.1 Automated Scanning
- [ ] Run a full vulnerability scan with selected tool
- [ ] Configure scan profiles based on target types
- [ ] Enable deep authentication-based scanning (if credentials are provided)
- [ ] Run web vulnerability scans (e.g., SQLi, XSS)

### 3.2 Manual Verification
- [ ] Validate critical/high vulnerabilities manually
- [ ] Perform specific tests for:
  - [ ] SQL Injection
  - [ ] Cross-Site Scripting (XSS)
  - [ ] Command Injection
  - [ ] Directory Traversal
  - [ ] File Upload Flaws
  - [ ] Insecure Direct Object References (IDOR)

---

## 4. **Analysis and Risk Rating**

### 4.1 Analyze Results
- [ ] Remove false positives
- [ ] Group similar vulnerabilities
- [ ] Prioritize findings based on:
  - [ ] CVSS Score (Common Vulnerability Scoring System)
  - [ ] Business Impact
  - [ ] Exploitability

### 4.2 Map to Standards
- [ ] Map vulnerabilities to security standards (OWASP Top 10, NIST, ISO 27001)
- [ ] Check for compliance gaps if applicable (PCI-DSS, HIPAA, GDPR)

---

## 5. **Reporting**

### 5.1 Prepare a Vulnerability Assessment Report
- [ ] Executive Summary (for non-technical audience)
- [ ] Detailed Technical Findings:
  - [ ] Vulnerability Description
  - [ ] Affected Systems
  - [ ] Risk Rating
  - [ ] Evidence (screenshots, logs)
  - [ ] Exploitability
  - [ ] Impact Analysis
- [ ] Recommendations for Remediation
- [ ] Prioritized Action Plan

### 5.2 Review and Validate
- [ ] Perform internal peer review of report
- [ ] Remove typos, clarify findings

---

## 6. **Post-Assessment Activities**

### 6.1 Deliver the Report
- [ ] Present the report to stakeholders
- [ ] Explain critical vulnerabilities verbally if needed
- [ ] Provide a roadmap for remediation (quick wins + long-term fixes)

### 6.2 Support Remediation
- [ ] Answer questions from remediation teams
- [ ] Re-test vulnerabilities after fixes
- [ ] Confirm closure of critical vulnerabilities

### 6.3 Continuous Improvement
- [ ] Document lessons learned
- [ ] Update VA methodology for future assessments
- [ ] Plan periodic re-assessments (quarterly, semi-annually)

---

# ðŸŽ¯ Important Tips:
- Always scan with the least impact setting first (to avoid crashing production systems).
- Perform authenticated scans whenever possible (more visibility into hidden vulnerabilities).
- Stay up-to-date with emerging vulnerabilities (subscribe to CVE, NVD feeds).
- Keep a professional tone when reporting; avoid blaming.
